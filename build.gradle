buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://plugins.gradle.org/m2/' }
		maven { url = 'https://maven.parchmentmc.org' }
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup 'org.spongepowered' }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'gradle.plugin.com.matthewprenger', name: 'CurseGradle', version: '1.4.0'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
		classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${mod_version}"
group = "top.theillusivec4.diet"
archivesBaseName = "diet-forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=diet.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                diet {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg "-mixin.config=diet.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                diet {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            arg "-mixin.config=diet.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--mod', 'diet', '--all', '--output', file('src/generated/resources/')

            mods {
                diet {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "diet.refmap.json"
}

repositories {
    maven {
        name = "C4's Maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "CurseForge"
        url = "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    runtimeOnly fg.deobf("curse.maven:jei-238222:4434397")
    runtimeOnly fg.deobf("curse.maven:appleskin-248787:3872808")
}

sourceSets {
    main {
        resources {
            srcDirs += 'docs'
            srcDirs += 'src/generated/resources'
        }
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : "Diet",
                    "Specification-Vendor"    : "C4",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : "Diet",
                    "Implementation-Version"  : "${getArchiveVersion()}",
                    "Implementation-Vendor"   : "C4",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs"            : "diet.mixins.json"])
    }
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }

    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'version': version, 'mc_version_range': mc_version_range, 'forge_version_range': forge_version_range, "loader_version": loader_version
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

jar.finalizedBy('reobfJar')

curseforge {

    project {
        apiKey = findProperty('curseKey') ?: 0
        id = "443570"
        releaseType = "${curse_release}"
        changelogType = 'markdown'
        changelog = file('docs/CHANGELOG.md')
        addArtifact(sourcesJar)
        "${curse_versions}".split(',').each {
            addGameVersion "${it}"
        }
    }
}